// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/url_usecase/usecase.go

// Package url_service_mock is a generated GoMock package.
package url_service_mock

import (
	context "context"
	reflect "reflect"
	url_types "url-shortener/internal/common/types/url_types"
	url_model "url-shortener/internal/model/url_model"

	gomock "github.com/golang/mock/gomock"
)

// MockserviceI is a mock of serviceI interface.
type MockserviceI struct {
	ctrl     *gomock.Controller
	recorder *MockserviceIMockRecorder
}

// MockserviceIMockRecorder is the mock recorder for MockserviceI.
type MockserviceIMockRecorder struct {
	mock *MockserviceI
}

// NewMockserviceI creates a new mock instance.
func NewMockserviceI(ctrl *gomock.Controller) *MockserviceI {
	mock := &MockserviceI{ctrl: ctrl}
	mock.recorder = &MockserviceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceI) EXPECT() *MockserviceIMockRecorder {
	return m.recorder
}

// CreateUrl mocks base method.
func (m *MockserviceI) CreateUrl(ctx context.Context, url *url_model.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUrl", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUrl indicates an expected call of CreateUrl.
func (mr *MockserviceIMockRecorder) CreateUrl(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUrl", reflect.TypeOf((*MockserviceI)(nil).CreateUrl), ctx, url)
}

// GetUrlByCode mocks base method.
func (m *MockserviceI) GetUrlByCode(ctx context.Context, code url_types.UrlCode) (*url_model.Url, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrlByCode", ctx, code)
	ret0, _ := ret[0].(*url_model.Url)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUrlByCode indicates an expected call of GetUrlByCode.
func (mr *MockserviceIMockRecorder) GetUrlByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlByCode", reflect.TypeOf((*MockserviceI)(nil).GetUrlByCode), ctx, code)
}

// GetUrlList mocks base method.
func (m *MockserviceI) GetUrlList(ctx context.Context) ([]*url_model.Url, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrlList", ctx)
	ret0, _ := ret[0].([]*url_model.Url)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUrlList indicates an expected call of GetUrlList.
func (mr *MockserviceIMockRecorder) GetUrlList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlList", reflect.TypeOf((*MockserviceI)(nil).GetUrlList), ctx)
}
